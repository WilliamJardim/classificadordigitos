
function treinarModelo(){
    if( window.confirm('Deseja iniciar o treinamento( SIM/NAO ) ??? Isso pode demorar um pouco!') == false ){
        console.log('cancelado');
        return;
    }

    // Estrutura da rede: 65536 unidades na entrada, 2 unidades na camada oculta, e 1 na saída
    const mlpConfig = {
        layers: [
            { type: LayerType.Input,  inputs: 4096,   units: 4096 }, //Aqui são apenas 65536 entradas, preciso melhorar esse método
            { type: LayerType.Hidden, inputs: 4096,   units: 4, functions: Array(4).fill('Sigmoid')  }, 
            { type: LayerType.Final,  inputs: 4,      units: 3, functions: [ 'Sigmoid', 'Sigmoid', 'Sigmoid' ]  }
        ],
        initialization: Initialization.Random
    };

    window.mlp = new MLP(mlpConfig);
    window.pesosInicias = mlp.initialParameters;

    // Dados de entrada para o problema XOR
    const inputs = dataset.getDados().map( (desenho)=>{ 
        return planificarDesenho(desenho);
    });

    //Gerar os rótulos
    const targets = [
        [1,0,0],
        [0,1,0],
        [0,0,1]
    ]

    
    // Treinando a rede
    mlp.train(inputs, targets, 0.0, 1, 1);

    window.pesosFinais = mlp.exportParameters();

    alert('Treinamento concluido!');

    return mlp;
}

DEIXEI A TAXA DE APRENDIZADO EM 0 para propositalmente impedir o ajuste de pesos.
quero testar como o modelo se sai quando EU NÂO TREINO ELE E TENTO USAR
PRA VER QUE SEM O BACKPROPAGATION NÂO È POSSIVEL FAZER ESTIMATIVAS

TESTES desenhando o W:
RESULTADO ESTIMADO (3) [0.3351970977442098, 0.5267582642100891, 0.8867003723178895]
main.js:283 RESULTADO ESTIMADO (3) [0.4836754198537245, 0.6160156881110039, 0.7992276443818804]
main.js:283 RESULTADO ESTIMADO (3) [0.40354436626316864, 0.3611564382964207, 0.8949007044976035]
main.js:283 RESULTADO ESTIMADO (3) [0.43037938874002324, 0.3855280241581249, 0.8676413820214186]
main.js:283 RESULTADO ESTIMADO (3) [0.324220332574422, 0.5139507146387199, 0.8464124179145579]
main.js:283 RESULTADO ESTIMADO (3) [0.4390048668154218, 0.6285224963136672, 0.8247654502244802]
main.js:283 RESULTADO ESTIMADO (3) [0.34912805782469536, 0.5197624985673249, 0.852405018572553]
main.js:283 RESULTADO ESTIMADO (3) [0.4678987202650324, 0.511769336956366, 0.9106671035138715]
main.js:283 RESULTADO ESTIMADO (3) [0.45264538022064293, 0.6104689130459043, 0.797453402560943]
main.js:283 RESULTADO ESTIMADO (3) [0.3693020153669686, 0.6299228949434984, 0.7518848556972387]
main.js:283 RESULTADO ESTIMADO (3) [0.3384572441430135, 0.562423952254646, 0.8265751111756514]
main.js:283 RESULTADO ESTIMADO (3) [0.5577130257822879, 0.44117466254365084, 0.897696833849321]
main.js:283 RESULTADO ESTIMADO (3) [0.6697004655830897, 0.3944982195590241, 0.8132223134241461]
main.js:283 RESULTADO ESTIMADO (3) [0.4052300238553805, 0.6622549559990714, 0.7580397838135313]
main.js:283 RESULTADO ESTIMADO (3) [0.42480048604470283, 0.5946103322206103, 0.7771581077794425]
main.js:283 RESULTADO ESTIMADO (3) [0.5083379625550929, 0.5401562097745594, 0.5074567430992198]
main.js:283 RESULTADO ESTIMADO (3) [0.3560304679838139, 0.4471212480311555, 0.9050135269796739]
main.js:283 RESULTADO ESTIMADO (3) [0.49413404698496766, 0.5450911567871896, 0.6732076231792089]
main.js:283 RESULTADO ESTIMADO (3) [0.4907811542653796, 0.6577534257209059, 0.8443360091975775]
main.js:283 RESULTADO ESTIMADO (3) [0.3298655293234469, 0.3213770649875642, 0.6945808608589438]
main.js:283 RESULTADO ESTIMADO (3) [0.3134165739167777, 0.41337280526243747, 0.9343836511351039]
main.js:283 RESULTADO ESTIMADO (3) [0.4376725321077329, 0.6039371493823044, 0.7972227953659498]
main.js:283 RESULTADO ESTIMADO (3) [0.2748971874739867, 0.6181675727926984, 0.7304372090517476]
main.js:283 RESULTADO ESTIMADO (3) [0.46970534023062444, 0.611312650386089, 0.7832649156959913]
main.js:283 RESULTADO ESTIMADO (3) [0.3208531815105118, 0.6429433140707843, 0.811884921032035]
main.js:283 RESULTADO ESTIMADO (3) [0.4157130520928778, 0.6283930375946268, 0.8645663136531957]
main.js:283 RESULTADO ESTIMADO (3) [0.2639432581383182, 0.44409717950579464, 0.8704289443037402]
main.js:283 RESULTADO ESTIMADO (3) [0.32926472166468995, 0.5759722939526003, 0.8815297546469003]

    NOTA: Note que os valores foram sempre assim nesse estilo, não faz sentido.


TESTES desenhando o B:
    [0.328689964650524, 0.39419798990458343, 0.9312249976668256]

    RESULTADO ESTIMADO (3) [0.36048962773332716, 0.6558282717145845, 0.7735830298421976]
    main.js:283 RESULTADO ESTIMADO (3) [0.44118160057239086, 0.3461877855543521, 0.8841369486924583]
    main.js:283 RESULTADO ESTIMADO (3) [0.5135719158037894, 0.32696264096408256, 0.8437920609055699]
    main.js:283 RESULTADO ESTIMADO (3) [0.5008310241794646, 0.5202528160864616, 0.9089118998968617]
    main.js:283 RESULTADO ESTIMADO (3) [0.4905579498392545, 0.435625690012882, 0.9333846032670815]
    main.js:283 RESULTADO ESTIMADO (3) [0.4951528799082449, 0.4753683028452907, 0.923187416169951]
    main.js:283 RESULTADO ESTIMADO (3) [0.3942229252027713, 0.6588012414083807, 0.7441655732984725]
    main.js:283 RESULTADO ESTIMADO (3) [0.3676633106525465, 0.3773425503407888, 0.9173159113813718]
    main.js:283 RESULTADO ESTIMADO (3) [0.5858406104470356, 0.4423451078449882, 0.8809500022284621]
    main.js:283 RESULTADO ESTIMADO (3) [0.584669575114953, 0.33726302575800204, 0.8488976551220503]
    main.js:283 RESULTADO ESTIMADO (3) [0.5914333662346494, 0.6309164711329032, 0.7808500806008479]
    main.js:283 RESULTADO ESTIMADO (3) [0.4498960098596702, 0.6513603538765746, 0.8573811958027867]
    main.js:283 RESULTADO ESTIMADO (3) [0.3764546435867007, 0.6470743729227048, 0.8504770335065089]
    main.js:283 RESULTADO ESTIMADO (3) [0.3642267943947083, 0.3900708565450866, 0.9202511513997301]
    main.js:283 RESULTADO ESTIMADO (3) [0.6758670882240866, 0.512703120520628, 0.7419796133614085]
    main.js:283 RESULTADO ESTIMADO (3) [0.5048797877024639, 0.4267120648020919, 0.9277855905027315]
    main.js:283 RESULTADO ESTIMADO (3) [0.4901510048744314, 0.629747913343297, 0.8695029152074677]
    main.js:283 RESULTADO ESTIMADO (3) [0.4680618325382218, 0.4311449937095069, 0.9279044840208954]
    main.js:283 RESULTADO ESTIMADO (3) [0.40642402799724736, 0.3166233050729136, 0.7656415279507001]
    main.js:283 RESULTADO ESTIMADO (3) [0.3026642782480352, 0.40267236164824927, 0.931862612731697]
    main.js:283 RESULTADO ESTIMADO (3) [0.6143514132054175, 0.38015879463253016, 0.8821733753211622]
    main.js:283 RESULTADO ESTIMADO (3) [0.325467267388472, 0.3974646794856493, 0.9331667592496697]
    main.js:283 RESULTADO ESTIMADO (3) [0.4274786932508437, 0.38223302874496795, 0.7939457787982327]
    main.js:283 RESULTADO ESTIMADO (3) [0.368713818691007, 0.38210466737096166, 0.9160220802060335]
    main.js:283 RESULTADO ESTIMADO (3) [0.31808653527704184, 0.6050500811282902, 0.8738435972193174]
    main.js:283 RESULTADO ESTIMADO (3) [0.6543483607858004, 0.3488936321920592, 0.8460653926043972]
    main.js:283 RESULTADO ESTIMADO (3) [0.32220379730959037, 0.5125146670847899, 0.9086025996176272]
    main.js:283 RESULTADO ESTIMADO (3) [0.5458138885935018, 0.3379225175851554, 0.8522588335752285]
    main.js:283 RESULTADO ESTIMADO (3) [0.33945740246654904, 0.4170945046054747, 0.9345048091792041]
    main.js:283 RESULTADO ESTIMADO (3) [0.5301806112820887, 0.3340432636976087, 0.853337967782213]
    main.js:283 RESULTADO ESTIMADO (3) [0.3761150960137876, 0.42423944191967145, 0.8798333497467311]
    main.js:283 RESULTADO ESTIMADO (3) [0.6683125454670775, 0.3724727591517523, 0.8382585172840915]
    main.js:283 RESULTADO ESTIMADO (3) [0.6747517262962839, 0.3629015881483815, 0.8411606564901152]
    main.js:283 RESULTADO ESTIMADO (3) [0.6049454156494672, 0.6064460385810246, 0.7756974700260578]

    NOTA: Note que os valores foram sempre assim nesse estilo, não faz sentido.



TESTES DESENHO J:
    RESULTADO ESTIMADO (3) [0.36242024968634723, 0.31713210974507083, 0.7534353162312915]

    [0.48849348079138816, 0.3459371555308195, 0.8129576567243674]

    RESULTADO ESTIMADO (3) [0.36242024968634723, 0.31713210974507083, 0.7534353162312915]
    main.js:283 RESULTADO ESTIMADO (3) [0.4419977773648468, 0.33260771798174316, 0.8338375976400766]
    main.js:283 RESULTADO ESTIMADO (3) [0.36525443343551955, 0.5941416312166903, 0.8371212563618694]
    main.js:283 RESULTADO ESTIMADO (3) [0.5715891390836831, 0.4405388734509833, 0.8853092153699911]
    main.js:283 RESULTADO ESTIMADO (3) [0.3167522509616738, 0.548663514982518, 0.8791393449924554]
    main.js:283 RESULTADO ESTIMADO (3) [0.35175244717042253, 0.4043903865478789, 0.8849198306669459]
    main.js:283 RESULTADO ESTIMADO (3) [0.32798957889089475, 0.35464230223227816, 0.8548378240945268]
    main.js:283 RESULTADO ESTIMADO (3) [0.42572394614166464, 0.40452971643895375, 0.9166516491349984]
    main.js:283 RESULTADO ESTIMADO (3) [0.3915062361670937, 0.5111156068172346, 0.9053628907667821]
    main.js:283 RESULTADO ESTIMADO (3) [0.41433594253656714, 0.4461916825675964, 0.8736581486183281]
    main.js:283 RESULTADO ESTIMADO (3) [0.4400381282323672, 0.354989659087034, 0.834773805805699]
    main.js:283 RESULTADO ESTIMADO (3) [0.27439036029297176, 0.6320881518294209, 0.7406913670370596]
    main.js:283 RESULTADO ESTIMADO (3) [0.3407327766561188, 0.6134199636282293, 0.7308905174700003]
    main.js:283 RESULTADO ESTIMADO (3) [0.44393676233282936, 0.3995740758701779, 0.91737811702941]
    main.js:283 RESULTADO ESTIMADO (3) [0.4377013481828891, 0.3897582646033822, 0.8682069604696276]
    main.js:283 RESULTADO ESTIMADO (3) [0.3357026075403142, 0.6534050736323721, 0.6943906597781794]
    main.js:283 RESULTADO ESTIMADO (3) [0.6327632459665542, 0.38354004376151984, 0.8684817508943486]
    main.js:283 RESULTADO ESTIMADO (3) [0.4244417299204099, 0.4803973135768404, 0.8218305187220575]
    main.js:283 RESULTADO ESTIMADO (3) [0.4574385441327932, 0.4205192754155085, 0.8187627475317313]
    main.js:283 RESULTADO ESTIMADO (3) [0.3278552579991173, 0.5690766769818508, 0.8260509526501738]
    main.js:283 RESULTADO ESTIMADO (3) [0.4755477722842986, 0.4378063294492424, 0.9313413155680398]
    main.js:283 RESULTADO ESTIMADO (3) [0.4804068972381957, 0.3337637758998288, 0.8611069336252474]
    main.js:283 RESULTADO ESTIMADO (3) [0.3309110072405689, 0.5168627926623377, 0.5938311077655474]
    main.js:283 RESULTADO ESTIMADO (3) [0.29414524939681386, 0.618206184215938, 0.7893499894039177]
    main.js:283 RESULTADO ESTIMADO (3) [0.5776553699126774, 0.3560777182364105, 0.7832052437102942]
    main.js:283 RESULTADO ESTIMADO (3) [0.47523219809393374, 0.4464561791278818, 0.7754928281672081]
    main.js:283 RESULTADO ESTIMADO (3) [0.45771382980349795, 0.5187764989040373, 0.6643199503201968]
    main.js:283 RESULTADO ESTIMADO (3) [0.5069661455011881, 0.6665295760418265, 0.8345707589233793]
    main.js:283 RESULTADO ESTIMADO (3) [0.4098152678321208, 0.5590235852268381, 0.8718156015507929]
    main.js:283 RESULTADO ESTIMADO (3) [0.3412462601981828, 0.59504546953037, 0.7156182850106532]
    main.js:283 RESULTADO ESTIMADO (3) [0.5168347173510017, 0.6037188208453385, 0.8387986854319412]
    main.js:283 RESULTADO ESTIMADO (3) [0.4228581116629858, 0.42387805306906035, 0.934613161061472]
    main.js:283 RESULTADO ESTIMADO (3) [0.4925482320050361, 0.49020883196599585, 0.8003806411080032]
    main.js:283 RESULTADO ESTIMADO (3) [0.4925482320050361, 0.49020883196599585, 0.8003806411080032]
    main.js:283 RESULTADO ESTIMADO (3) [0.6631367779055883, 0.5967900802573771, 0.7110052645948025]
    main.js:283 RESULTADO ESTIMADO (3) [0.2709632026385964, 0.637533754496767, 0.805970215989834]
    main.js:283 RESULTADO ESTIMADO (3) [0.2850328376812746, 0.4163711173531746, 0.9067942282149175]




E AO TESTAR COM AS PROPIAS IMAGENS DE TREINAMENTO, ELE ERRA TUDO E ERRA MUITO FEIO:

Teste feito com a propia imagem W de treinamento:
    const estimativaT = window.mlp.forward( planificarDesenho( dataset.dados[0] ) );
    console.log('RESULTADO ESTIMADO DE TREINO', estimativaT);
    RESULTADO ESTIMADO DE TREINO (3) [0.6786872438476012, 0.5840995232753963, 0.6959581627923672]


Teste feito com a propia imagem J de treinamento:
    const estimativaT = window.mlp.forward( planificarDesenho( dataset.dados[1] ) );

    console.log('RESULTADO ESTIMADO DE TREINO', estimativaT);
    RESULTADO ESTIMADO DE TREINO (3) [0.48849348079138816, 0.3459371555308195, 0.8129576567243674]


Teste feito com a propia imagem B de treinamento:
    const estimativaT = window.mlp.forward( planificarDesenho( dataset.dados[2] ) );

    console.log('RESULTADO ESTIMADO DE TREINO', estimativaT);
    RESULTADO ESTIMADO DE TREINO (3) [0.328689964650524, 0.39419798990458343, 0.9312249976668256]



E UM DESENHO EM BRANCO PRODUZ EXATAMENTE ESSE RESULTADO AQUI: [0.4925482320050361, 0.49020883196599585, 0.8003806411080032] o que não é muito diferente de todos os valores que vimos o modelo estimar erroneamente

